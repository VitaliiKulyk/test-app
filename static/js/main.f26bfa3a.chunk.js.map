{"version":3,"sources":["components/GeoInfo.js","components/WeatherInfo.js","modules/geo.js","modules/weather.js","App.js","index.js"],"names":["GeoInfoConponent","props","className","error","latitude","toFixed","longitude","WeatherInfoConponent","country","city","temp","changedTemp","iconUrl","src","alt","Number","isFinite","getCurrentGeoLocation","a","async","navigator","geolocation","Promise","reject","resolve","getCurrentPosition","position","coords","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","message","getWeatherByLocation","axios","get","params","lat","lon","units","appid","response","data","name","sys","main","icon","weather","App","useState","geoLocation","setGeoLocation","weatherData","setWeatherData","setChangedTemp","useEffect","getLocation","getWeather","style","backgroundColor","getColor","Fragment","Slider","track","aria-labelledby","valueLabelDisplay","getAriaValueText","x","defaultValue","Math","floor","marks","value","label","min","max","valueLabelFormat","parseInt","onChange","e","v","Button","onClick","color","ReactDOM","render","document","getElementById"],"mappings":"gQAEe,SAASA,EAAiBC,GACxC,OACC,yBAAKC,UAAU,WACbD,EAAME,OAAS,yBAAKD,UAAU,SAASD,EAAME,OAC7CF,EAAMG,UACN,yBAAKF,UAAU,gBACd,yBAAKA,UAAU,gBAAf,aAAyCD,EAAMG,SAASC,QAAQ,IAChE,yBAAKH,UAAU,gBAAf,cAA0CD,EAAMK,UAAUD,QAAQ,MCPxD,SAASE,EAAqBN,GAAQ,IAC9CO,EAA8CP,EAA9CO,QAASC,EAAqCR,EAArCQ,KAAMC,EAA+BT,EAA/BS,KAAMC,EAAyBV,EAAzBU,YAAaC,EAAYX,EAAZW,QACxC,OACC,yBAAKV,UAAU,eACd,6BACC,yBAAKW,IAAKD,EAASE,IAAI,iBAExB,yBAAKZ,UAAU,SACd,yBAAKA,UAAU,cAAf,kBACiBO,EADjB,KACyBD,GAEzB,yBAAKN,UAAU,YACba,OAAOC,SAASL,IAAgB,IADlC,IACwCI,OAAOC,SAASL,GAAeA,EAAcD,EADrF,YCbG,SAAeO,IAAf,uBAAAC,EAAAC,OAAA,mDACDC,UAAUC,YADT,yCAC6BC,QAAQC,OAAO,CAAEpB,MAAO,mDADrD,kCAAAe,EAAA,MAIwB,IAAII,SAAQ,SAACE,EAASD,GAAV,OAAqBH,UAAUC,YAAYI,mBAAmBD,EAASD,OAJ3G,YAIOG,EAJP,QAKcC,OALd,yBAMqCD,EAASC,OAAjCvB,EANb,EAMaA,SAAUE,EANvB,EAMuBA,UANvB,kBAOYgB,QAAQE,QAAQ,CAAEpB,WAAUE,eAPxC,8DAYS,KAAMsB,KAZf,cAaU,KAAMC,kBAbhB,UAgBU,KAAMC,qBAhBhB,UAmBU,KAAMC,QAnBhB,2BAcSC,EAAU,2CAdnB,oCAiBSA,EAAU,uCAjBnB,oCAoBSA,EAAU,8CApBnB,oCAuBSA,EAAU,6BAvBnB,sDA0BQV,QAAQC,OAAO,CAAES,aA1BzB,yD,qBCEA,SAAeC,EAAf,kCAAAf,EAAAC,OAAA,uDAAsCf,EAAtC,EAAsCA,SAAUE,EAAhD,EAAgDA,UAAhD,WAAAY,EAAA,MACegB,IAAMC,IAAI,kDAAmD,CACjFC,OAAQ,CACPC,IAAKjC,EACLkC,IAAKhC,EACLiC,MAAO,SACPC,MAAO,uCANH,cACFC,EADE,OASAC,EAASD,EAATC,KACFjC,EAAOiC,EAAKC,KACZnC,EAAUkC,EAAKE,IAAIpC,QACnBE,EAAOgC,EAAKG,KAAKnC,KACjBoC,EAAOJ,EAAKK,QAAQ,GAAGD,KACvBlC,EAdE,2CAc4CkC,EAd5C,6BAgBC,CACNtC,UACAC,OACAC,OACAoC,OACAlC,YArBK,sCCiFQoC,MAzEf,WAAgB,IAAD,EACwBC,qBADxB,mBACPC,EADO,KACMC,EADN,OAEwBF,qBAFxB,mBAEPG,EAFO,KAEMC,EAFN,OAGwBJ,mBAAS,MAHjC,mBAGPtC,EAHO,KAGM2C,EAHN,KAsCd,OAjCAC,qBAAU,WASJL,GARL,uBAAAhC,EAAAC,OAAA,2EAAAD,EAAA,MAEsCD,KAFtC,gBAEQb,EAFR,EAEQA,SAAUE,EAFlB,EAEkBA,UAChB6C,EAAe,CAAE/C,WAAUE,cAH7B,gDAKE6C,EAAe,CAAEhD,MAAO,KAAM6B,UALhC,wDAQkBwB,MAGnBD,qBAAU,WAWLL,GAAeA,EAAY9C,UAV/B,uBAAAc,EAAAC,OAAA,gEAEQf,EAAwB8C,EAAxB9C,SAAUE,EAAc4C,EAAd5C,UAFlB,WAAAY,EAAA,MAG0Be,EAAqB,CAAE7B,WAAUE,eAH3D,OAGM8C,EAHN,OAIEC,EAAeD,GAJjB,gDAMED,EAAe,CAAEhD,MAAO,UAN1B,wDAUyCsD,KACvC,CAACP,IAUH,yBAAKhD,UAAU,MAAMwD,MAAO,CAAEC,gBAR/B,WACC,IAAIjD,EAAOK,OAAOC,SAASL,GAAeA,EAAcyC,GAAeA,EAAY1C,KACnF,OAAIA,GAAQ,GAAW,UACnBA,EAAO,GAAW,UACf,UAIwCkD,KAC9C,kBAAC5D,EAAqBkD,GACrBE,GACA,kBAAC,IAAMS,SAAP,KACC,kBAAC,EAAD,iBAA0BT,EAA1B,CAAuCzC,YAAaA,KACpD,yBAAKT,UAAU,mBACd,kBAAC4D,EAAA,EAAD,CACCC,OAAO,EACPC,kBAAgB,kBAChBC,kBAAkB,OAClBC,iBAAkB,SAAAC,GAAC,gBAAOA,EAAP,UACnBC,aAAcC,KAAKC,MAAMlB,EAAY1C,MACrC6D,MAAO,CACN,CAAEC,OAAQ,GAAIC,MAAO,YACrB,CAAED,MAAO,GAAIC,MAAO,YAErBC,KAAM,GACNC,IAAK,GACLH,MAAOzD,OAAOC,SAASL,GAAeA,EAAcyC,EAAY1C,KAChEkE,iBAAkB,SAAAT,GAAC,OAAIU,SAASV,GAAK,SACrCW,SAAU,SAACC,EAAGC,GAAJ,OAAU1B,EAAe0B,MAEnCjE,OAAOC,SAASL,IAChB,kBAACsE,EAAA,EAAD,CAAQC,QAAS,kBAAM5B,EAAe,OAAO6B,MAAM,WAAnD,0BCnEPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f26bfa3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function GeoInfoConponent(props) {\r\n\treturn (\r\n\t\t<div className=\"geoInfo\">\r\n\t\t\t{props.error && <div className=\"error\">{props.error}</div>}\r\n\t\t\t{props.latitude && (\r\n\t\t\t\t<div className=\"positionInfo\">\r\n\t\t\t\t\t<div className=\"positionText\">Latitude: {props.latitude.toFixed(4)}</div>\r\n\t\t\t\t\t<div className=\"positionText\">Longitude: {props.longitude.toFixed(4)}</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\n\r\nexport default function WeatherInfoConponent(props) {\r\n\tvar { country, city, temp, changedTemp, iconUrl } = props;\r\n\treturn (\r\n\t\t<div className=\"weatherInfo\">\r\n\t\t\t<div>\r\n\t\t\t\t<img src={iconUrl} alt=\"weatherIcon\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"stats\">\r\n\t\t\t\t<div className=\"headerText\">\r\n\t\t\t\t\tTemperature in {city}, {country}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"tempText\">\r\n\t\t\t\t\t{Number.isFinite(changedTemp) && '*'} {Number.isFinite(changedTemp) ? changedTemp : temp} °C\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","export async function getCurrentGeoLocation() {\r\n\tif (!navigator.geolocation) return Promise.reject({ error: 'Geolocation is not supported by this browser.' });\r\n\r\n\ttry {\r\n        const position = await new Promise((resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject));\r\n        if (position.coords) {\r\n            const { latitude, longitude } = position.coords;\r\n            return Promise.resolve({ latitude, longitude });\r\n        }\r\n    }\r\n    catch (error) {\r\n        var message;\r\n        switch (error.code) {\r\n            case error.PERMISSION_DENIED:\r\n                message = 'User denied the request for Geolocation.';\r\n                break;\r\n            case error.POSITION_UNAVAILABLE:\r\n                message = 'Location information is unavailable.';\r\n                break;\r\n            case error.TIMEOUT:\r\n                message = 'The request to get user location timed out.';\r\n                break;\r\n            default:\r\n                message = 'An unknown error occurred.';\r\n                break;\r\n        }\r\n        return Promise.reject({ message });\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport async function getWeatherByLocation({ latitude, longitude }) {\r\n\tvar response = await axios.get('https://api.openweathermap.org/data/2.5/weather', {\r\n\t\tparams: {\r\n\t\t\tlat: latitude,\r\n\t\t\tlon: longitude,\r\n\t\t\tunits: 'metric',\r\n\t\t\tappid: '46a990336fddc7a7d9a1dc020c179d83'\r\n\t\t}\r\n\t});\r\n\tvar { data } = response;\r\n\tvar city = data.name;\r\n\tvar country = data.sys.country;\r\n\tvar temp = data.main.temp;\r\n\tvar icon = data.weather[0].icon;\r\n\tvar iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcity,\r\n\t\ttemp,\r\n\t\ticon,\r\n\t\ticonUrl\r\n\t};\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\n\nimport GeoInfoConponent from './components/GeoInfo';\nimport WeatherInfoComponent from './components/WeatherInfo';\n\nimport { getCurrentGeoLocation } from './modules/geo';\nimport { getWeatherByLocation } from './modules/weather';\n\nfunction App() {\n\tconst [geoLocation, setGeoLocation] = useState();\n\tconst [weatherData, setWeatherData] = useState();\n\tconst [changedTemp, setChangedTemp] = useState(null);\n\n\tuseEffect(() => {\n\t\tasync function getLocation() {\n\t\t\ttry {\n\t\t\t\tvar { latitude, longitude } = await getCurrentGeoLocation();\n\t\t\t\tsetGeoLocation({ latitude, longitude });\n\t\t\t} catch (error) {\n\t\t\t\tsetGeoLocation({ error: error.message });\n\t\t\t}\n\t\t}\n\t\tif (!geoLocation) getLocation();\n\t});\n\n\tuseEffect(() => {\n\t\tasync function getWeather() {\n\t\t\ttry {\n\t\t\t\tvar { latitude, longitude } = geoLocation;\n\t\t\t\tvar weatherData = await getWeatherByLocation({ latitude, longitude });\n\t\t\t\tsetWeatherData(weatherData);\n\t\t\t} catch (error) {\n\t\t\t\tsetGeoLocation({ error: 'error' });\n\t\t\t}\n\t\t}\n\n\t\tif (geoLocation && geoLocation.latitude) getWeather();\n\t}, [geoLocation]);\n\n\tfunction getColor() {\n\t\tvar temp = Number.isFinite(changedTemp) ? changedTemp : weatherData && weatherData.temp;\n\t\tif (temp < -10) return '#00ffff';\n\t\tif (temp > 10) return '#ff8c00';\n\t\treturn '#fff700';\n\t}\n\n\treturn (\n\t\t<div className=\"app\" style={{ backgroundColor: getColor() }}>\n\t\t\t<GeoInfoConponent {...geoLocation} />\n\t\t\t{weatherData && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<WeatherInfoComponent {...weatherData} changedTemp={changedTemp} />\n\t\t\t\t\t<div className=\"sliderContainer\">\n\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\ttrack={false}\n\t\t\t\t\t\t\taria-labelledby=\"discrete-slider\"\n\t\t\t\t\t\t\tvalueLabelDisplay=\"auto\"\n\t\t\t\t\t\t\tgetAriaValueText={x => `${x}°C`}\n\t\t\t\t\t\t\tdefaultValue={Math.floor(weatherData.temp)}\n\t\t\t\t\t\t\tmarks={[\n\t\t\t\t\t\t\t\t{ value: -30, label: '-30°C' },\n\t\t\t\t\t\t\t\t{ value: 30, label: '30°C' }\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tmin={-30}\n\t\t\t\t\t\t\tmax={30}\n\t\t\t\t\t\t\tvalue={Number.isFinite(changedTemp) ? changedTemp : weatherData.temp}\n\t\t\t\t\t\t\tvalueLabelFormat={x => parseInt(x) + '°C'}\n\t\t\t\t\t\t\tonChange={(e, v) => setChangedTemp(v)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{Number.isFinite(changedTemp) && (\n\t\t\t\t\t\t\t<Button onClick={() => setChangedTemp(null)} color=\"primary\">\n\t\t\t\t\t\t\t\tReset to real data\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}